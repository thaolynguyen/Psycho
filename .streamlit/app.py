import openai
import streamlit as st
import os



# Setting page title and header
st.set_page_config(page_title="Psychokwak", page_icon=":robot_face:")
st.write(
    "Has environment variables been set:",
    os.environ["openai_key"] == st.secrets["openai_key"],
)




#with st.sidebar:
 #   openai_key = st.text_input(label='Cl√© API', type = 'password')

# Set org ID and API key
#openai.api_key = openai_key

model = "gpt-3.5-turbo"

st.markdown(f'<h1 style="color:#4b2a59;">{"üí¨ Psychokwak, ton th√©rapeute personnel"}</h1>', unsafe_allow_html=True)
st.markdown("""
<style>
    [data-testid=stSidebar] {
        background: rgba(204, 204, 255, 0.3);
        
    }
</style>
""", unsafe_allow_html=True)


content = "Tu es un th√©rapeute capable de fournir un soutien psychologique virtuel empathique.\
Tu doit accueillir chaleureusement les utilisateurs, √©tablir une connexion √©motionnelle et offrir un environnement s√ªr pour discuter de leurs pr√©occupations √©motionnelles.\
Voici les instructions que tu dois suivre : \
Le chatbot doit commencer la conversation en demandant comment l'utilisateur se sent aujourd'hui ou s'il y a quelque chose de sp√©cifique qui le pr√©occupe. Il doit √©tablir une connexion empathique d√®s le d√©part.\
Utilisez des questions ouvertes pour encourager l'utilisateur √† s'exprimer davantage. D√©montrez une √©coute active et validez les √©motions exprim√©es par l'utilisateur.\
Fournissez des informations et des conseils fond√©s sur des principes psychologiques solides. Expliquez les concepts psychologiques de mani√®re claire et accessible.\
Encouragez l'utilisateur √† r√©fl√©chir sur ses pens√©es et ses √©motions en posant des questions r√©fl√©chies. Guidez l'utilisateur dans une exploration plus profonde de ses probl√®mes ou de ses pr√©occupations.\
Respectez la confidentialit√© et la vie priv√©e de l'utilisateur. Ne collectez ni ne stockez d'informations personnelles sans consentement explicite.\
Soyez vigilant quant aux situations d'urgence. Si vous d√©tectez des signes de d√©tresse grave ou de menace imminente, fournissez des ressources d'urgence ou recommandez √† l'utilisateur de contacter des professionnels de la sant√© qualifi√©s.\
Concluez la conversation de mani√®re appropri√©e en remerciant l'utilisateur pour sa confiance et en offrant des ressources suppl√©mentaires, telles que des suggestions de lectures ou des liens vers des organisations sp√©cialis√©es.\
Notes suppl√©mentaires : \
Utilisez un langage clair, simple et non jargonis√© pour faciliter la compr√©hension des utilisateurs.\
Parle de mani√®re amicale et chaleureuse, comme un ami proche de l'utilisateur.\
Tu dois √™tre empathique et essayer de comprendre ses √©motions\
Respectez l'√©thique de la pratique psychologique, y compris la confidentialit√© et le respect des limites, √† tout moment."

if "openai_model" not in st.session_state:
    st.session_state["openai_model"] = "gpt-3.5-turbo"

if 'past' not in st.session_state:
    st.session_state['past'] = []

if 'messages' not in st.session_state:
    st.session_state['messages'] = [
        {"role": "system", "content": content}
    ]



# generate a response
def generate_response(prompt):
    st.session_state['messages'].append({"role": "user", "content": prompt})

    completion = openai.ChatCompletion.create(
        model=model,
        messages=st.session_state['messages']
    )
    response = completion.choices[0].message.content
    st.session_state['messages'].append({"role": "assistant", "content": response})

    # print(st.session_state['messages'])
    total_tokens = completion.usage.total_tokens
    prompt_tokens = completion.usage.prompt_tokens
    completion_tokens = completion.usage.completion_tokens
    return response, total_tokens, prompt_tokens, completion_tokens


def reponse_chat(prompt = ""):

    if prompt := st.chat_input("Ecris quelque chose"):
        
        st.session_state.messages.append({"role": "user", "content": prompt})

        with st.chat_message("user"):
            st.markdown(prompt)

        with st.chat_message("assistant"):
            message_placeholder = st.empty()
            full_response = ""
            for response in openai.ChatCompletion.create(
                model=st.session_state["openai_model"],
                messages=[
                    {"role": m["role"], "content": m["content"]}
                    for m in st.session_state.messages
                ],
                stream=True,
            ):
                full_response += response.choices[0].delta.get("content", "")
                message_placeholder.markdown(full_response + "‚ñå")
            message_placeholder.markdown(full_response)
        st.session_state.messages.append({"role": "assistant", "content": full_response})

col1,col2,col3 = st.columns(3)

with col1:
    clear_button = st.button("üóëÔ∏è Effacer la conversation", key="clear")



if clear_button: 
    st.session_state['generated'] = []
    st.session_state['past'] = []
    st.session_state.messages = [
                {"role": "system", "content": content}]
            





with st.container():
    cpt = 0

    for message in st.session_state.messages:
        if cpt !=0:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])
        cpt +=1



reponse_chat()



